from telegram import Update
from telegram.ext import ContextTypes
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.error import BadRequest
from datetime import datetime
from typing import List
import logging

from services import MonevoFacade
from message_parser import MessageProcessor
from models import ResumenPresupuesto, Movimiento


class TelegramHandlers:
    """Handlers para el bot de Telegram (Single Responsibility)"""

    def __init__(self, monevo_service: MonevoFacade):
        self.monevo_service = monevo_service
        self.message_processor = MessageProcessor(monevo_service)
        self.logger = logging.getLogger(__name__)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Maneja mensajes de texto normales"""
        usuario_id = str(update.message.from_user.id)
        mensaje = update.message.text.strip()
        state = context.user_data.get("state")

        # Manejar cancelaci√≥n en cualquier estado
        if mensaje == "‚ùå Cancelar":
            context.user_data.clear()
            await update.message.reply_text("Operaci√≥n cancelada.", reply_markup=ReplyKeyboardRemove())
            await update.message.reply_text("Men√∫ principal:", reply_markup=self._main_menu_keyboard())
            return

        # Estados para crear presupuesto
        if state == "ESPERA_CATEGORIA_NUEVA":
            categoria = mensaje.lower().strip()
            if not categoria:
                await update.message.reply_text("‚ö†Ô∏è La categor√≠a no puede estar vac√≠a. Intenta de nuevo.", 
                                               reply_markup=self._cancel_keyboard())
                return
            
            # Verificar si ya existe
            if self.monevo_service.presupuesto_existe(usuario_id, categoria):
                await update.message.reply_text(f"‚ö†Ô∏è Ya existe un presupuesto para '{categoria}'. Usa actualizar en su lugar.", 
                                               reply_markup=self._cancel_keyboard())
                return
            
            context.user_data["categoria"] = categoria
            context.user_data["state"] = "ESPERA_MONTO_PRESUPUESTO"
            await update.message.reply_text(f"Categor√≠a: *{categoria.capitalize()}*\nEscribe el monto del presupuesto:", 
                                           parse_mode="Markdown", reply_markup=self._cancel_keyboard())
            return

        if state == "ESPERA_MONTO_PRESUPUESTO":
            # Limpiamos formato: quitamos puntos y comas
            txt = mensaje.replace(".", "").replace(",", "")
            if not txt.isdigit():
                await update.message.reply_text("‚ö†Ô∏è Solo n√∫meros. Intenta de nuevo.", reply_markup=self._cancel_keyboard())
                return
            
            monto = int(txt)
            if monto <= 0:
                await update.message.reply_text("‚ö†Ô∏è El monto debe ser mayor a 0. Intenta de nuevo.", 
                                               reply_markup=self._cancel_keyboard())
                return
            
            context.user_data["monto"] = monto
            context.user_data["state"] = "ESPERA_PERIODICIDAD"
            await update.message.reply_text("Selecciona la periodicidad:", 
                                           reply_markup=self._periodicity_keyboard())
            return

        if state == "ESPERA_PERIODICIDAD":
            periodicidades_validas = ["diario", "semanal", "mensual", "anual"]
            periodicidad = mensaje.lower().strip()
            
            if periodicidad not in periodicidades_validas:
                await update.message.reply_text("‚ö†Ô∏è Selecciona una opci√≥n v√°lida.", 
                                               reply_markup=self._periodicity_keyboard())
                return
            
            # Crear el presupuesto
            categoria = context.user_data.get("categoria")
            monto = context.user_data.get("monto")
            
            success, message = self.monevo_service.crear_presupuesto(
                usuario_id, categoria, monto, periodicidad
            )
            
            context.user_data.clear()
            emoji = "‚úÖ" if success else "‚ö†Ô∏è"
            await update.message.reply_text(f"{emoji} {message}", reply_markup=ReplyKeyboardRemove())
            await update.message.reply_text("Men√∫ principal:", reply_markup=self._main_menu_keyboard())
            return

        # Estados para actualizar presupuesto  
        if state == "ESPERA_MONTO_ACTUALIZAR":
            txt = mensaje.replace(".", "").replace(",", "")
            if not txt.isdigit():
                await update.message.reply_text("‚ö†Ô∏è Solo n√∫meros. Intenta de nuevo.", reply_markup=self._cancel_keyboard())
                return
            
            monto = int(txt)
            if monto <= 0:
                await update.message.reply_text("‚ö†Ô∏è El monto debe ser mayor a 0. Intenta de nuevo.", 
                                               reply_markup=self._cancel_keyboard())
                return
            
            context.user_data["monto"] = monto
            context.user_data["state"] = "ESPERA_PERIODICIDAD_ACTUALIZAR"
            await update.message.reply_text("¬øCambiar tambi√©n la periodicidad?", 
                                           reply_markup=self._periodicity_update_keyboard())
            return

        if state == "ESPERA_PERIODICIDAD_ACTUALIZAR":
            periodicidades_validas = ["diario", "semanal", "mensual", "anual", "mantener actual"]
            opcion = mensaje.lower().strip()
            
            if opcion not in periodicidades_validas:
                await update.message.reply_text("‚ö†Ô∏è Selecciona una opci√≥n v√°lida.", 
                                               reply_markup=self._periodicity_update_keyboard())
                return
            
            # Actualizar el presupuesto
            categoria = context.user_data.get("categoria")
            monto = context.user_data.get("monto")
            periodicidad = None if opcion == "mantener actual" else opcion
            
            success, message = self.monevo_service.actualizar_presupuesto(
                usuario_id, categoria, monto, periodicidad
            )
            
            context.user_data.clear()
            emoji = "‚úÖ" if success else "‚ö†Ô∏è"
            await update.message.reply_text(f"{emoji} {message}", reply_markup=ReplyKeyboardRemove())
            await update.message.reply_text("Men√∫ principal:", reply_markup=self._main_menu_keyboard())
            return

        # Estados para gastos e ingresos
        if state in ("ESPERA_MONTO", "ESPERA_CONCEPTO"):
            if mensaje == "‚¨ÖÔ∏è Cambiar categor√≠a":
                accion = context.user_data.get("accion", "gasto")
                context.user_data.clear()
                resumenes = self.monevo_service.obtener_resumen(str(update.message.from_user.id))
                await update.message.reply_text("Elige otra categor√≠a:", reply_markup=ReplyKeyboardRemove())
                await update.message.reply_text("Categor√≠as:", reply_markup=self._category_keyboard(resumenes, accion))
                return

        # 1) Flujo guiado por estados (monto/concepto)
        if state == "ESPERA_MONTO":
            # Limpiamos formato: quitamos puntos y comas
            txt = mensaje.replace(".", "").replace(",", "")
            if not txt.isdigit():
                await update.message.reply_text("‚ö†Ô∏è Solo n√∫meros. Intenta de nuevo.", reply_markup=self._cancel_keyboard())
                return
            context.user_data["monto"] = int(txt)
            context.user_data["state"] = "ESPERA_CONCEPTO"
            await update.message.reply_text("Escribe el concepto (opcional). Env√≠a '-' para omitir.", reply_markup=self._cancel_keyboard())
            return

        if state == "ESPERA_CONCEPTO":
            concepto = "" if mensaje == "-" else mensaje
            accion = context.user_data.get("accion")
            cat = context.user_data.get("categoria")
            monto = context.user_data.get("monto")

            if not accion or not cat or not monto:
                # Estado inconsistente: limpiar y volver al men√∫
                context.user_data.clear()
                await update.message.reply_text("Se reinici√≥ el flujo.", reply_markup=ReplyKeyboardRemove())
                await update.message.reply_text("Men√∫ principal:", reply_markup=self._main_menu_keyboard())
                return

            if accion == "gasto":
                ok, msg = self.monevo_service.registrar_gasto(
                    usuario_id, cat, monto, concepto)
            else:
                ok, msg = self.monevo_service.registrar_ingreso(
                    usuario_id, cat, monto, concepto)

            context.user_data.clear()
            await update.message.reply_text(msg, reply_markup=ReplyKeyboardRemove())
            # Ofrecer atajos para seguir
            await update.message.reply_text(
                "¬øQu√© sigue?",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è Men√∫", callback_data="a=menu")],
                    [InlineKeyboardButton(
                        "Registrar otro", callback_data=f"a={accion}|c={cat}")],
                    [InlineKeyboardButton(
                        "üìä Ver resumen", callback_data="a=resumen")]
                ])
            )
            return

        # 2) Si no hay estado, usamos tu parser existente
        respuesta = self.message_processor.process_message(usuario_id, mensaje)

        # Si el parser no entendi√≥ (mensaje de ayuda), ofrecemos men√∫ inline en vez de solo texto
        if respuesta.startswith("‚ùå No entend√≠ el mensaje"):
            await update.message.reply_text(respuesta)
            await update.message.reply_text("Tambi√©n puedes usar el men√∫:", reply_markup=self._main_menu_keyboard())
            return

        await update.message.reply_text(respuesta)

    async def handle_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /start"""
        mensaje = self._get_welcome_message()
        await update.message.reply_text(
            mensaje,
            reply_markup=self._main_menu_keyboard()
        )

    async def _safe_edit_message(self, query, text: str, reply_markup=None, parse_mode=None):
        """Edita un mensaje de forma segura, manejando el error de contenido duplicado"""
        try:
            await query.edit_message_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
        except BadRequest as e:
            if "Message is not modified" in str(e):
                # Si el mensaje es id√©ntico, responder con callback answer
                await query.answer("‚úÖ Men√∫ actualizado", show_alert=False)
                self.logger.debug(f"Mensaje duplicado detectado: {text[:50]}...")
            else:
                # Si es otro tipo de BadRequest, re-lanzar la excepci√≥n
                raise e

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Maneja callbacks de botones inline"""
        query = update.callback_query
        await query.answer()
        data = query.data or ""

        # Mini-parser: a=<accion>|c=<categoria>
        params = dict(part.split("=", 1)
                      for part in data.split("|") if "=" in part)
        accion = params.get("a")
        categoria = params.get("c")
        usuario_id = str(query.from_user.id)

        if accion == "menu":
            await self._safe_edit_message(
                query, 
                "Men√∫ principal:", 
                reply_markup=self._main_menu_keyboard()
            )
            return

        if accion == "resumen":
            resumenes = self.monevo_service.obtener_resumen(usuario_id)
            if not resumenes:
                await self._safe_edit_message(
                    query, 
                    "‚ö†Ô∏è No tienes presupuestos registrados a√∫n.", 
                    reply_markup=self._main_menu_keyboard()
                )
                return
            # Enviamos resumen (texto) y luego botones por categor√≠a
            texto = self._format_resumen(resumenes)
            await self._safe_edit_message(query, texto, parse_mode="Markdown")
            # Enviar un mensaje nuevo con acciones por categor√≠a
            await query.message.reply_text(
                "Acciones por categor√≠a:",
                reply_markup=self._resumen_actions_keyboard(resumenes)
            )
            return

        if accion == "crear":
            # Flujo para crear presupuesto
            context.user_data.update({
                "accion": "crear",
                "state": "ESPERA_CATEGORIA_NUEVA"
            })
            await self._safe_edit_message(query, "Crear nuevo presupuesto")
            await query.message.reply_text(
                "Escribe el nombre de la nueva categor√≠a:",
                reply_markup=self._cancel_keyboard()
            )
            return

        if accion == "actualizar":
            # Seleccionar categor√≠a a actualizar
            if not categoria:
                resumenes = self.monevo_service.obtener_resumen(usuario_id)
                if not resumenes:
                    await self._safe_edit_message(
                        query, 
                        "‚ö†Ô∏è No tienes presupuestos para actualizar.", 
                        reply_markup=self._main_menu_keyboard()
                    )
                    return
                await self._safe_edit_message(
                    query,
                    "Elige la categor√≠a a actualizar:",
                    reply_markup=self._category_keyboard(resumenes, "actualizar")
                )
                return
            
            # Iniciar flujo de actualizaci√≥n para la categor√≠a seleccionada
            context.user_data.update({
                "accion": "actualizar",
                "categoria": categoria,
                "state": "ESPERA_MONTO_ACTUALIZAR"
            })
            await self._safe_edit_message(
                query,
                f"Actualizar: *{categoria.capitalize()}*",
                parse_mode="Markdown"
            )
            await query.message.reply_text(
                "Escribe el nuevo monto del presupuesto:",
                reply_markup=self._cancel_keyboard()
            )
            return

        if accion in ("gasto", "ingreso"):
            # Si no hay categor√≠a a√∫n, mostrar selecci√≥n basada en BD
            if not categoria:
                resumenes = self.monevo_service.obtener_resumen(usuario_id)
                if not resumenes:
                    await self._safe_edit_message(
                        query, 
                        "‚ö†Ô∏è Primero crea un presupuesto con /crear", 
                        reply_markup=self._main_menu_keyboard()
                    )
                    return
                await self._safe_edit_message(
                    query,
                    f"Selecciona la categor√≠a para {'gasto' if accion == 'gasto' else 'ingreso'}:",
                    reply_markup=self._category_keyboard(resumenes, accion)
                )
                return

            # Si ya tenemos categor√≠a, pedimos monto por TEXTO (no botones)
            context.user_data.update({
                "accion": accion,
                "categoria": categoria,
                "state": "ESPERA_MONTO"
            })

            # Edita el mensaje original SOLO con texto
            await self._safe_edit_message(
                query,
                f"Categor√≠a: *{categoria.capitalize()}*",
                parse_mode="Markdown"
            )

            # Env√≠a un MENSAJE NUEVO para pedir el monto
            await query.message.reply_text(
                "Escribe el monto en n√∫meros (ej. 15000).",
                reply_markup=self._cancel_keyboard()
            )
            return

        if accion == "hist":
            resumenes = self.monevo_service.obtener_resumen(usuario_id)
            if not resumenes:
                await self._safe_edit_message(
                    query, 
                    "‚ö†Ô∏è No tienes presupuestos registrados a√∫n.", 
                    reply_markup=self._main_menu_keyboard()
                )
                return
            
            # Si ya hay una categor√≠a seleccionada, mostrar historial directamente
            if categoria:
                success, message, movimientos = self.monevo_service.obtener_historial(usuario_id, categoria)
                if not success:
                    await self._safe_edit_message(
                        query, 
                        f"‚ö†Ô∏è {message}", 
                        reply_markup=self._main_menu_keyboard()
                    )
                    return
                
                # Mostrar historial
                historial_texto = self._format_historial(categoria, movimientos)
                await self._safe_edit_message(query, historial_texto, parse_mode="Markdown")
                
                # Agregar botones de acci√≥n
                await query.message.reply_text(
                    "Acciones:",
                    reply_markup=self._category_quick_actions_keyboard(categoria)
                )
                return
            
            # Si no hay categor√≠a, mostrar selector
            await self._safe_edit_message(
                query,
                "Elige una categor√≠a para ver historial:",
                reply_markup=self._category_keyboard(resumenes, "hist")
            )
            return

        if accion == "ver":
            if not categoria:
                await query.answer("Selecciona una categor√≠a", show_alert=False)
                return
            resumenes = self.monevo_service.obtener_resumen(usuario_id)
            for r in resumenes:
                if r.categoria == categoria:
                    await self._safe_edit_message(
                        query,
                        (f"üìä Presupuesto {categoria.capitalize()}:\n"
                         f"üí∞ Saldo: ${r.saldo:,.0f}\n"
                         f"üìÖ Periodicidad: {r.periodicidad}\n"
                         f"üìà Usado: {r.porcentaje_usado:.1f}%"),
                    )
                    # Atajos para actuar sobre la categor√≠a
                    await query.message.reply_text(
                        "Acciones:",
                        reply_markup=self._category_quick_actions_keyboard(categoria)
                    )
                    return
            await self._safe_edit_message(
                query, 
                f"‚ö†Ô∏è No se encontr√≥ presupuesto '{categoria}'", 
                reply_markup=self._main_menu_keyboard()
            )
            return

        if accion == "confirm_eliminar":
            # Espera c=<categoria>
            if not categoria:
                await query.answer("Falta categor√≠a", show_alert=False)
                return
            ok, msg = self.monevo_service.eliminar_presupuesto(usuario_id, categoria)
            await self._safe_edit_message(
                query,
                f"{'‚úÖ' if ok else '‚ö†Ô∏è'} {msg}",
                reply_markup=self._main_menu_keyboard()
            )
            return

        if accion == "eliminar":
            # Mostrar confirmaci√≥n
            if not categoria:
                # Elegir primero la categor√≠a
                resumenes = self.monevo_service.obtener_resumen(usuario_id)
                if not resumenes:
                    await self._safe_edit_message(
                        query, 
                        "‚ö†Ô∏è No tienes presupuestos para eliminar.", 
                        reply_markup=self._main_menu_keyboard()
                    )
                    return
                await self._safe_edit_message(
                    query,
                    "Elige la categor√≠a a eliminar:",
                    reply_markup=self._category_keyboard(resumenes, "eliminar")
                )
                return
            await self._safe_edit_message(
                query,
                f"¬øEliminar presupuesto '{categoria}'?",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        "‚úÖ Confirmar", callback_data=f"a=confirm_eliminar|c={categoria}")],
                    [InlineKeyboardButton(
                        "‚ùå Cancelar", callback_data="a=menu")]
                ])
            )
            return

        # fallback
        await self._safe_edit_message(
            query, 
            "Men√∫ principal:", 
            reply_markup=self._main_menu_keyboard()
        )

    async def handle_crear(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /crear - Crear presupuesto"""
        usuario_id = str(update.message.from_user.id)
        args = context.args

        if len(args) < 2:
            await update.message.reply_text(
                "‚ö†Ô∏è Uso: /crear <categoria> <monto> [periodicidad]\n"
                "Ejemplo: /crear disfrute 500000 mensual"
            )
            return

        categoria = args[0].lower().strip()

        try:
            monto = float(args[1])
        except ValueError:
            await update.message.reply_text("‚ö†Ô∏è El monto debe ser un n√∫mero v√°lido.")
            return

        periodicidad = args[2].lower() if len(args) >= 3 else "mensual"

        success, message = self.monevo_service.crear_presupuesto(
            usuario_id, categoria, monto, periodicidad)

        emoji = "‚úÖ" if success else "‚ö†Ô∏è"
        await update.message.reply_text(f"{emoji} {message}")

    async def handle_actualizar(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /actualizar - Actualizar presupuesto existente"""
        usuario_id = str(update.message.from_user.id)
        args = context.args

        if len(args) < 2:
            await update.message.reply_text(
                "‚ö†Ô∏è Uso: /actualizar <categoria> <nuevo_monto> [nueva_periodicidad]\n"
                "Ejemplo: /actualizar disfrute 600000 semanal"
            )
            return

        categoria = args[0].lower().strip()

        try:
            monto = float(args[1])
        except ValueError:
            await update.message.reply_text("‚ö†Ô∏è El monto debe ser un n√∫mero v√°lido.")
            return

        periodicidad = args[2].lower() if len(args) >= 3 else None

        success, message = self.monevo_service.actualizar_presupuesto(
            usuario_id, categoria, monto, periodicidad)

        emoji = "‚úÖ" if success else "‚ö†Ô∏è"
        await update.message.reply_text(f"{emoji} {message}")

    async def handle_eliminar(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /eliminar - Eliminar presupuesto"""
        usuario_id = str(update.message.from_user.id)
        args = context.args

        if len(args) < 1:
            await update.message.reply_text(
                "‚ö†Ô∏è Uso: /eliminar <categoria>\n"
                "Ejemplo: /eliminar disfrute"
            )
            return

        categoria = args[0].lower().strip()

        success, message = self.monevo_service.eliminar_presupuesto(
            usuario_id, categoria)

        emoji = "‚úÖ" if success else "‚ö†Ô∏è"
        await update.message.reply_text(f"{emoji} {message}")

    async def handle_historial(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /historial - Ver movimientos de una categor√≠a"""
        usuario_id = str(update.message.from_user.id)
        args = context.args

        if len(args) < 1:
            await update.message.reply_text(
                "‚ö†Ô∏è Uso: /historial <categoria>\n"
                "Ejemplo: /historial moto"
            )
            return

        categoria = args[0].lower().strip()

        success, message, movimientos = self.monevo_service.obtener_historial(
            usuario_id, categoria)

        if not success:
            await update.message.reply_text(f"‚ö†Ô∏è {message}")
            return

        respuesta = self._format_historial(categoria, movimientos)
        await update.message.reply_text(respuesta, parse_mode="Markdown")

    async def handle_resumen(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /resumen - Ver resumen de todos los presupuestos"""
        usuario_id = str(update.message.from_user.id)
        resumenes = self.monevo_service.obtener_resumen(usuario_id)

        if not resumenes:
            await update.message.reply_text("‚ö†Ô∏è No tienes presupuestos registrados a√∫n.")
            return

        respuesta = self._format_resumen(resumenes)
        await update.message.reply_text(respuesta, parse_mode="Markdown")

    def _format_historial(self, categoria: str, movimientos: List[Movimiento]) -> str:
        """Formatea el historial de movimientos para mostrar"""
        respuesta = f"üìú *Historial de {categoria.capitalize()}*\n\n"

        for movimiento in movimientos:
            concepto_texto = f" - {movimiento.concepto}" if movimiento.concepto else ""
            fecha_formateada = movimiento.fecha.strftime("%d/%m/%Y %H:%M")

            if movimiento.tipo == "gasto":
                respuesta += f"üí∏ ${movimiento.monto:,.0f}{concepto_texto} ({fecha_formateada})\n"
            else:
                respuesta += f"üí∞ ${movimiento.monto:,.0f}{concepto_texto} ({fecha_formateada})\n"

        return respuesta

    def _format_resumen(self, resumenes: List[ResumenPresupuesto]) -> str:
        """Formatea el resumen de presupuestos para mostrar"""
        respuesta = "üìä *Resumen de Presupuestos*\n\n"

        total_saldo = 0
        for resumen in resumenes:
            total_saldo += resumen.saldo

            # Emoji basado en el porcentaje usado
            if resumen.porcentaje_usado <= 50:
                emoji_estado = "üü¢"
            elif resumen.porcentaje_usado <= 80:
                emoji_estado = "üü°"
            else:
                emoji_estado = "üî¥"

            respuesta += (f"{emoji_estado} *{resumen.categoria.capitalize()}*\n"
                        f"   üí∞ Saldo: ${resumen.saldo:,.0f}\n"
                        f"   üìä Usado: {resumen.porcentaje_usado:.1f}%\n"
                        f"   üìÖ {resumen.periodicidad.capitalize()}\n\n")

        respuesta += f"üíµ *Total disponible: ${total_saldo:,.0f}*"

        return respuesta

    def _main_menu_keyboard(self) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("üìä Resumen", callback_data="a=resumen")],
            [InlineKeyboardButton("üí∏ Gasto", callback_data="a=gasto"),
             InlineKeyboardButton("üí∞ Ingreso", callback_data="a=ingreso")],
            [InlineKeyboardButton("üìú Historial", callback_data="a=hist")],
            [InlineKeyboardButton("‚ûï Crear presupuesto", callback_data="a=crear"),
             InlineKeyboardButton("‚úèÔ∏è Actualizar", callback_data="a=actualizar")],
            [InlineKeyboardButton("üóëÔ∏è Eliminar presupuesto", callback_data="a=eliminar")]
        ])

    def _resumen_actions_keyboard(self, resumenes: list[ResumenPresupuesto]) -> InlineKeyboardMarkup:
        # Por cada categor√≠a: Ver | +Ingreso | -Gasto | Historial
        rows = []
        for r in resumenes:
            c = r.categoria
            rows.append([InlineKeyboardButton(
                f"{c.capitalize()} ‚Äì Ver", callback_data=f"a=ver|c={c}")])
            rows.append([
                InlineKeyboardButton(
                    "+Ingreso", callback_data=f"a=ingreso|c={c}"),
                InlineKeyboardButton("-Gasto", callback_data=f"a=gasto|c={c}"),
                InlineKeyboardButton(
                    "Historial", callback_data=f"a=hist|c={c}")
            ])
        # Bot√≥n volver
        rows.append([InlineKeyboardButton("‚¨ÖÔ∏è Men√∫", callback_data="a=menu")])
        return InlineKeyboardMarkup(rows)

    def _category_keyboard(self, resumenes: list[ResumenPresupuesto], accion: str) -> InlineKeyboardMarkup:
        # Genera botones de categor√≠as para la acci√≥n dada
        rows = []
        for r in resumenes:
            c = r.categoria
            rows.append([InlineKeyboardButton(c.capitalize(),
                        callback_data=f"a={accion}|c={c}")])
        rows.append([InlineKeyboardButton("‚¨ÖÔ∏è Men√∫", callback_data="a=menu")])
        return InlineKeyboardMarkup(rows)

    def _category_quick_actions_keyboard(self, categoria: str) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("+Ingreso", callback_data=f"a=ingreso|c={categoria}"),
             InlineKeyboardButton("-Gasto", callback_data=f"a=gasto|c={categoria}")],
            [InlineKeyboardButton("üìú Historial", callback_data=f"a=hist|c={categoria}")],
            [InlineKeyboardButton("üìä Resumen", callback_data="a=resumen"),
             InlineKeyboardButton("‚¨ÖÔ∏è Men√∫", callback_data="a=menu")]
        ])

    def _periodicity_keyboard(self) -> ReplyKeyboardMarkup:
        """Teclado para seleccionar periodicidad al crear presupuesto"""
        return ReplyKeyboardMarkup([
            ["Diario", "Semanal"],
            ["Mensual", "Anual"],
            ["‚ùå Cancelar"]
        ], resize_keyboard=True, one_time_keyboard=True)
    
    def _periodicity_update_keyboard(self) -> ReplyKeyboardMarkup:
        """Teclado para actualizar periodicidad"""
        return ReplyKeyboardMarkup([
            ["Diario", "Semanal"],
            ["Mensual", "Anual"],
            ["Mantener actual"],
            ["‚ùå Cancelar"]
        ], resize_keyboard=True, one_time_keyboard=True)

    def _cancel_keyboard(self) -> ReplyKeyboardMarkup:
        # ReplyKeyboard minimal para controlar mientras se teclea monto/concepto
        return ReplyKeyboardMarkup([["‚ùå Cancelar", "‚¨ÖÔ∏è Cambiar categor√≠a"]], resize_keyboard=True)

    def _get_welcome_message(self) -> str:
        """Mensaje de bienvenida"""
        return """
üëã ¬°Hola! Bienvenido a *Monevo*.

ü§ñ *Comandos disponibles:*

üìù *Gesti√≥n de Presupuestos:*
‚Ä¢ `/crear <categoria> <monto> [periodicidad]` - Crear presupuesto
‚Ä¢ `/actualizar <categoria> <monto> [periodicidad]` - Actualizar presupuesto
‚Ä¢ `/eliminar <categoria>` - Eliminar presupuesto

üìä *Consultas:*
‚Ä¢ `/resumen` - Ver todos los presupuestos
‚Ä¢ `/historial <categoria>` - Ver movimientos de una categor√≠a
‚Ä¢ `Ver presupuesto <categoria>` - Ver detalles de un presupuesto

üí∏ *Registro de Movimientos:*
‚Ä¢ `Gast√© <monto> de <categoria> por <concepto>`
‚Ä¢ `A√±ad√≠ <monto> a <categoria> por <concepto>`

üìå *Nota:* Para registrar movimientos, la categor√≠a debe existir previamente.

üí° *Ejemplo completo:*
1. `/crear moto 100000 mensual`
2. `Gast√© 15000 de moto por gasolina`
3. `Ver presupuesto moto`
"""